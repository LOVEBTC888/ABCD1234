import{_ as e,M as a,p as n,q as s,N as o,a1 as d}from"./framework-2ecd7faa.js";const r={},i=d(`<h1 id="interactive-editor" tabindex="-1"><a class="header-anchor" href="#interactive-editor" aria-hidden="true">#</a> Interactive Editor</h1><p>There is a built in system for instantly updating the visual music as the end user is typing an ABC string into a textarea.</p><h2 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> Constructor</h2><p>Call this constructor to link a textarea with a div that should display the music:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">abcjs<span class="token punctuation">.</span>Editor</span><span class="token punctuation">(</span>editArea<span class="token punctuation">,</span> editorParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>Editor Parameters</th><th>Description</th></tr></thead><tbody><tr><td><code>editArea</code></td><td>If it is a string, then it is an HTML id of a textarea control. Otherwise, it should be an instantiation of an object that expresses the <code>EditArea</code> interface.</td></tr><tr><td><code>editorParams</code></td><td>Hash of parameters for the editor.</td></tr></tbody></table><h2 id="editor-params" tabindex="-1"><a class="header-anchor" href="#editor-params" aria-hidden="true">#</a> Editor Params</h2><table><thead><tr><th>editorParams</th><th>Description</th></tr></thead><tbody><tr><td><code>canvas_id</code> or <code>paper_id</code></td><td>HTML id to draw in. If not present, then the drawing happens just below the editor. This can either be an ID or the actual HTML element.</td></tr><tr><td><code>generate_warnings</code></td><td>If present, then parser warnings are displayed on the page. The warnings are displayed just above the music.</td></tr><tr><td><code>warnings_id</code></td><td>If present, the HTML id to place the warnings. This supersedes <code>generate_warnings</code>. This can either be an id or the actual HTML element.</td></tr><tr><td><code>onchange</code></td><td>If present, the callback function to call whenever there has been a change in the ABC string.</td></tr><tr><td><code>selectionChangeCallback</code></td><td>If present, the callback function to call whenever there has been a change of selection.</td></tr><tr><td><code>abcjsParams</code></td><td>Options to send to abcjs when re-rendering both the visual and the audio.</td></tr><tr><td><code>indicate_changed</code></td><td>The dirty flag is set if this is true. When the user types in the textarea then the class <code>abc_textarea_dirty</code> is added to the textarea. Also see the <code>isDirty</code> and <code>setNotDirty</code> methods below.</td></tr><tr><td><code>synth</code></td><td>If present, add an audio control. This is an object. See below for the possible properties. Note: if the browser doesn&#39;t support synth, then this parameter has no effect.</td></tr></tbody></table><h3 id="deprecated-parameters" tabindex="-1"><a class="header-anchor" href="#deprecated-parameters" aria-hidden="true">#</a> Deprecated parameters:</h3><p>The following parameters are still supported, but they are for the old style of audio generation that used midi.js.</p><table><thead><tr><th>editorParams</th><th>Description</th></tr></thead><tbody><tr><td><code>generate_midi</code></td><td>if present, then midi is generated.</td></tr><tr><td><code>midi_id</code></td><td>if present, the HTML id to place the midi control. Otherwise it is placed in the same div as the paper. An encompassing <code>div</code> surrounds each control with the class in the format <code>&quot;inline-midi midi-%d&quot;</code>.</td></tr><tr><td><code>midi_download_id</code></td><td>if present, the HTML id to place the midi download link. Otherwise, if <code>midi_id</code> is present it is placed there, otherwise it is placed in the same div as the paper. An encompassing <code>div</code> surrounds each control with the class in the format <code>&quot;download-midi midi-%d&quot;</code>.</td></tr></tbody></table><h2 id="synth-properties" tabindex="-1"><a class="header-anchor" href="#synth-properties" aria-hidden="true">#</a> Synth Properties</h2><p>This is the object that is passed into the editor in the <code>synth</code> property. If this is present, then a <code>SynthController</code> object is created to handle the audio.</p><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>el</td><td>Either a CSS selector or an HTML element for where to place the audio control.</td></tr><tr><td>cursorControl</td><td>Optional: The callback object of type <code>CursorControl</code> if you want to get notified when timing events happen. (See the audio section for more details.)</td></tr><tr><td>options</td><td>Optional: The options to pass directly to the <code>SynthController</code> object.</td></tr></tbody></table><h2 id="available-methods" tabindex="-1"><a class="header-anchor" href="#available-methods" aria-hidden="true">#</a> Available Methods</h2><table><thead><tr><th>Editor entry points</th><th>Description</th></tr></thead><tbody><tr><td><code>setReadOnly(bool)</code></td><td>adds or removes the class <code>abc_textarea_readonly</code>, and adds or removes the attribute <code>readonly</code>.</td></tr><tr><td><code>updateSelection()</code></td><td>Called when the user has changed the selection. This calls the engraver_controller to show the selection.</td></tr><tr><td><code>fireSelectionChanged()</code></td><td>Called by the textarea object when the user has changed the selection.</td></tr><tr><td><code>paramChanged(abcjsParams)</code></td><td>Called to set the abcjsParams after the editor has been created. The music is re-rendered immediately.</td></tr><tr><td><code>setNotDirty()</code></td><td>Called by the client app to reset the dirty flag. (For instance, when the user saves their work.)</td></tr><tr><td><code>isDirty()</code></td><td>Returns true or false, whether the textarea contains the same text that it started with.</td></tr><tr><td><code>pause(bool)</code></td><td>Stops the automatic rendering when the user is typing.</td></tr><tr><td><code>millisecondsPerMeasure()</code></td><td>Called to return the number of milliseconds in a measure for the first tune in the editor.</td></tr><tr><td><code>synthParamChanged(options)</code></td><td>Called to replace the options passed in when the editor is created. It replaces the options here: <code>{ synth: { options: originalOptions } }</code></td></tr></tbody></table><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>warnings<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>paper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    abc_editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">abcjs<span class="token punctuation">.</span>Editor</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 
        <span class="token literal-property property">canvas_id</span><span class="token operator">:</span> <span class="token string">&quot;paper&quot;</span><span class="token punctuation">,</span> 
        <span class="token literal-property property">warnings_id</span><span class="token operator">:</span><span class="token string">&quot;warnings&quot;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function c(p,l){const t=a("abcjs-editor");return n(),s("div",null,[i,o(t,{abc:`X: 1
T: Cooley's
M: 4/4
L: 1/8
K: Emin
|:D2|EB{c}BA B2 EB|~B2 AB dBAG|FDAD BDAD|FDAD dAFD|
`})])}const u=e(r,[["render",c],["__file","interactive-editor.html.vue"]]);export{u as default};
