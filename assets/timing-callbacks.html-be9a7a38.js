import{w as o}from"./app-59542f1f.js";import{_ as i,M as a,p as t,q as r,U as p,R as c,N as l,a1 as d}from"./framework-2ecd7faa.js";const u={async mounted(){await o(),this.abcjsReady=!0,setTimeout(()=>{this.callbacks=[this.$refs.timingCallbacks]},500)},data(){return{abcjsReady:!1,callbacks:[]}}},h=d(`<h1 id="timing-callbacks" tabindex="-1"><a class="header-anchor" href="#timing-callbacks" aria-hidden="true">#</a> Timing Callbacks</h1><p>This runs an animation timer and does callbacks at various intervals. This allows you to do various effects that are timed with beats or playing notes.</p><h2 id="creation" tabindex="-1"><a class="header-anchor" href="#creation" aria-hidden="true">#</a> Creation</h2><p>To use this create an instance of it:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> timingCallbacks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">abcjs<span class="token punctuation">.</span>TimingCallbacks</span><span class="token punctuation">(</span>visualObj<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>Parameters</th><th>Description</th></tr></thead><tbody><tr><td>visualObj</td><td>This is the output of the <code>renderAbc()</code> call. It is the music that will be timed.</td></tr><tr><td>params</td><td>This is a object. See below for the possible properties.</td></tr></tbody></table><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><table><thead><tr><th>Name</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>qpm</code></td><td>whatever is in the Q: field</td><td>Number of beats per minute.</td></tr><tr><td><code>extraMeasuresAtBeginning</code></td><td>0</td><td>Don&#39;t start the callbacks right away, but insert this number of measures first.</td></tr><tr><td><code>beatCallback</code></td><td>null</td><td>Called for each beat passing the beat number (starting at 0).</td></tr><tr><td><code>eventCallback</code></td><td>null</td><td>Called for each event (either a note, a rest, or a chord, and notes in separate voices are grouped together.)</td></tr><tr><td><code>lineEndCallback</code></td><td>null</td><td>Called at the end of each line. (This is useful if you want to be sure the music is scrolled into view at the right time.) See <code>lineEndAnticipation</code> for more details.</td></tr><tr><td><code>lineEndAnticipation</code></td><td>0</td><td>The number of milliseconds for the <code>lineEndCallback</code> to anticipate end of the line. That is, if you want to get the callback half a second before the end of the line, use 500.</td></tr><tr><td><code>beatSubdivisions</code></td><td>1</td><td>How many callbacks should happen for each beat. This allows finer control in the client, for instance, to handle a progress bar.</td></tr></tbody></table><h2 id="callbacks" tabindex="-1"><a class="header-anchor" href="#callbacks" aria-hidden="true">#</a> Callbacks</h2><h3 id="beatcallback" tabindex="-1"><a class="header-anchor" href="#beatcallback" aria-hidden="true">#</a> beatCallback</h3><p>This is called once for every beat in the tune. It is called one additional time when the tune is finished.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">beatCallback</span><span class="token punctuation">(</span><span class="token parameter">beatNumber<span class="token punctuation">,</span> totalBeats<span class="token punctuation">,</span> totalTime<span class="token punctuation">,</span> position<span class="token punctuation">,</span> debugInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>beatNumber</td><td>Zero-based beat number. Usually this will increment sequentially and regularly, but if javascript is paused long enough (for instance, if the browser tab is changed), then there may be a number of these calls at once when it catches up.</td></tr><tr><td>totalBeats</td><td>The total number of beats (including all repeats) that will be played.</td></tr><tr><td>totalTime</td><td>The total number of milliseconds of the tune.</td></tr><tr><td>position</td><td>The interpolated position of the cursor if the beat occurs between notes. This is an object with the attributes { left: , top: , height: } This can be used to smooth out the cursor by moving it on the beat callbacks. The higher the number of <code>beatSubdivisions</code> the smoother the cursor will be.</td></tr><tr><td>debugInfo</td><td>A hash of some extra info that might be useful in figuring out why the callback was triggered.</td></tr></tbody></table><h3 id="eventcallback" tabindex="-1"><a class="header-anchor" href="#eventcallback" aria-hidden="true">#</a> eventCallback</h3><p>This is called once for every &quot;event&quot; in time - either a note or a rest. If there are multiple notes at the same time, then it is only called once for that group of notes.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">eventCallback</span><span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The parameter <code>ev</code> is an object that looks like this:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ev <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;event&quot;</span><span class="token punctuation">,</span> <span class="token comment">// This is always &quot;event&quot;</span>

    <span class="token string-property property">&quot;milliseconds&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// The number of milliseconds from the beginning of the piece</span>
    <span class="token string-property property">&quot;millisecondsPerMeasure&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// The number of milliseconds per measure</span>

    <span class="token string-property property">&quot;line&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// The current &quot;line&quot;, that is, the staff system.</span>
    <span class="token string-property property">&quot;measureNumber&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// The measure number. Resets per line, so the first measure number on a line is zero.</span>

    <span class="token string-property property">&quot;top&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// The number of pixels from the top of the svg that the note appears.</span>
    <span class="token string-property property">&quot;height&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// The height of the note, in pixels. </span>
    <span class="token string-property property">&quot;left&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// The number of pixels from the left edge of the svg.</span>
    <span class="token string-property property">&quot;width&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// The width of the note</span>

    <span class="token string-property property">&quot;elements&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// Array of the actual elements on the page that are represented by the note or notes.</span>
    <span class="token string-property property">&quot;startCharArray&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> number <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// the character position in the original abc string</span>
    <span class="token string-property property">&quot;endCharArray&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> number <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// the character position in the original abc string</span>
    <span class="token string-property property">&quot;midiPitches&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// Array of the currently playing pitches</span>
        <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;pitch&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// The pitch number (based on the midi standard, i.e. middle C is 60)</span>
            <span class="token string-property property">&quot;durationInMeasures&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// the note value as a fraction. (that is, a quarter note is 0.025)</span>
            <span class="token string-property property">&quot;volume&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// The volume expressed as a number between 0 and 127</span>
            <span class="token string-property property">&quot;instrument&quot;</span><span class="token operator">:</span> number <span class="token comment">// The instrument number (based on the midi standard, i.e. acoustic_grand_piano is 0)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes:</h4><ul><li><p>The <code>startCharArray</code> and <code>endCharArray</code> are arrays because there is more than one location in the abc string if there is more than one voice.</p></li><li><p>The format of the <code>elements</code> array is subject to change in future versions.</p></li><li><p>This is called one last time with passing in <code>null</code> at the end of the tune. On that call <code>eventCallback</code> can return the string &quot;continue&quot; to keep the timer from stopping. This is useful if you want to play on repeat - in theory you would probably have another call to <code>seek()</code>.</p></li><li><p>This function can be a Promise or not.</p></li></ul><h3 id="lineendcallback" tabindex="-1"><a class="header-anchor" href="#lineendcallback" aria-hidden="true">#</a> lineEndCallback</h3><p>This will be called as the cursor is approaching the end of a line of music. This is useful if there is more than a screen&#39;s worth of music; it can be used to scroll the page at the right time.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">lineEndCallback</span><span class="token punctuation">(</span><span class="token parameter">info<span class="token punctuation">,</span> event<span class="token punctuation">,</span> details</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The parameter <code>info</code> looks like this:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;milliseconds&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// current milliseconds from beginning of piece</span>
    <span class="token string-property property">&quot;top&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// The number of pixels from the top of the svg to the top of the cursor</span>
    <span class="token string-property property">&quot;bottom&quot;</span><span class="token operator">:</span> number <span class="token comment">// The number of pixels from the top of the svg to the bottom of the cursor</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The parameter <code>event</code> is the standard note event.</p><p>The parameter <code>details</code> looks like this:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>details <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;line&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token comment">// the current line number (zero-based)</span>
    <span class="token string-property property">&quot;endTimings&quot;</span><span class="token operator">:</span> array <span class="token comment">// the array of the timings for each line</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>endTimings</code> array elements are of the same type as the <code>info</code> parameter.</p><h2 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h2><p>These are the entry points that can be called on the <code>timingCallbacks</code> object.</p><h3 id="start-position-units" tabindex="-1"><a class="header-anchor" href="#start-position-units" aria-hidden="true">#</a> start(position, units)</h3><p>This starts the timer that triggers the callbacks. This is called to both start and resume after calling pause. See the <code>setProgress</code> method below for explanation of the parameters with one special case:</p><p>If <code>position</code> is undefined then if the previous call was to <code>pause()</code>, then the animation continues from where it left off. If there was no pause, then the animation starts from the beginning.</p><h3 id="pause" tabindex="-1"><a class="header-anchor" href="#pause" aria-hidden="true">#</a> pause()</h3><p>Pauses the animation. Calling <code>start()</code> afterwards will resume from where it left off.</p><h3 id="stop" tabindex="-1"><a class="header-anchor" href="#stop" aria-hidden="true">#</a> stop()</h3><p>Stop the animation. After calling this, the next call to <code>start()</code> will start at the beginning.</p><h3 id="reset" tabindex="-1"><a class="header-anchor" href="#reset" aria-hidden="true">#</a> reset()</h3><p>Move the timer back to the beginning, so the animation starts over. This can be called either when the animation is currently running or when it is paused.</p><h3 id="setprogress-position-units" tabindex="-1"><a class="header-anchor" href="#setprogress-position-units" aria-hidden="true">#</a> setProgress(position, units)</h3><p>Change the position of the animation. This allows random access to any place in the tune.</p><p>If the second parameter is not present, then <code>units</code> equals &quot;percent&quot;. The possible values are:</p><ul><li><p><code>&quot;percent&quot;</code>: The percent passed in is a number between 0 and 1. This can be called either when the animation is currently running or when it is paused.</p></li><li><p><code>&quot;seconds&quot;</code>: The seconds from the beginning of the tune. If this is passed the end of the tune it is changed to the end.</p></li><li><p><code>&quot;beats&quot;</code>: The beats from the beginning of the tune. If this is passed the end of the tune it is changed to the end.</p></li></ul><h3 id="replacetarget-visualobj" tabindex="-1"><a class="header-anchor" href="#replacetarget-visualobj" aria-hidden="true">#</a> replaceTarget(visualObj)</h3><p>If the underlying music changes on the fly, this replaces the current object without having to destroy the object and start over. <code>visualObj</code> is the return value from <code>renderAbc</code>.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>Paste in any ABC you want here then click &quot;start&quot; to see what is returned by the timing callbacks:</p>`,48);function m(b,k,v,f,e,g){const n=a("example-tune-book"),s=a("timing-callbacks");return t(),r("div",null,[h,e.abcjsReady?(t(),p(n,{key:0,callbacks:e.callbacks,"tune-id":32},null,8,["callbacks"])):c("v-if",!0),l(s,{ref:"timingCallbacks",target:"#abc"},null,512)])}const T=i(u,[["render",m],["__file","timing-callbacks.html.vue"]]);export{T as default};
